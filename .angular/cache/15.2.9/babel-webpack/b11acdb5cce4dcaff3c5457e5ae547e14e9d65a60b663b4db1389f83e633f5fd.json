{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./courses.service\";\nexport class CoursesStoreService {\n  constructor(coursesService) {\n    this.coursesService = coursesService;\n    this.isLoading$$ = new BehaviorSubject(false);\n    this.courses$$ = new BehaviorSubject([]);\n    this.isLoading$ = this.isLoading$$.asObservable();\n    this.courses$ = this.courses$$.asObservable();\n  }\n  setLoading(isLoading) {\n    this.isLoading$$.next(isLoading);\n  }\n  getAll() {\n    this.setLoading(true);\n    this.coursesService.getAll().pipe(tap(courses => {\n      this.courses$$.next(courses);\n      this.setLoading(false);\n    })).subscribe();\n    // Add your code here\n  }\n\n  createCourse(course) {\n    this.setLoading(true);\n    this.coursesService.createCourse(course).pipe(tap(() => {\n      this.getAll();\n    })).subscribe();\n    // Add your code here\n  }\n\n  getCourse(id) {\n    // Add your code here\n    return this.coursesService.getCourse(id);\n  }\n  editCourse(id, course) {\n    this.setLoading(true);\n    this.coursesService.editCourse(id, course).pipe(tap(() => {\n      this.getAll();\n    })).subscribe();\n    // Add your code here\n  }\n\n  deleteCourse(id) {\n    this.setLoading(true);\n    this.coursesService.deleteCourse(id).pipe(tap(() => {\n      this.getAll();\n    })).subscribe();\n    // Add your code here\n  }\n\n  filterCourses(value) {\n    this.setLoading(true);\n    this.coursesService.filterCourses(value).pipe(tap(courses => {\n      this.courses$$.next(courses);\n      this.setLoading(false);\n    })).subscribe();\n    // Add your code here\n  }\n\n  getAllAuthors() {\n    this.setLoading(true);\n    this.coursesService.getAllAuthors().pipe(tap(() => {\n      this.setLoading(false);\n    })).subscribe();\n    // Add your code here\n  }\n\n  createAuthor(name) {\n    this.setLoading(true);\n    this.coursesService.createAuthor(name).pipe(tap(() => {\n      this.getAllAuthors();\n    })).subscribe();\n    // Add your code here\n  }\n\n  getAuthorById(id) {\n    return this.coursesService.getAuthorById(id);\n    // Add your code here\n  }\n}\n\nCoursesStoreService.ɵfac = function CoursesStoreService_Factory(t) {\n  return new (t || CoursesStoreService)(i0.ɵɵinject(i1.CoursesService));\n};\nCoursesStoreService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CoursesStoreService,\n  factory: CoursesStoreService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","tap","CoursesStoreService","constructor","coursesService","isLoading$$","asObservable","courses$$","setLoading","isLoading","next","getAll","pipe","courses","subscribe","createCourse","course","getCourse","id","editCourse","deleteCourse","filterCourses","value","getAllAuthors","createAuthor","name","getAuthorById","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Isti\\Desktop\\epam-tasks\\angular-fundamentals-template\\src\\app\\services\\courses-store.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CoursesService } from './courses.service';\nimport { tap } from 'rxjs/operators'\nimport { Course } from '@app/models/course.model';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CoursesStoreService {\n    private isLoading$$ = new BehaviorSubject<boolean>(false);\n    private courses$$ = new BehaviorSubject<Course[]>([]);\n\n    public isLoading$: Observable<boolean> = this.isLoading$$.asObservable()\n    public courses$: Observable<Course[]> = this.courses$$.asObservable()\n\n    constructor(private coursesService: CoursesService){}\n\n    private setLoading(isLoading: boolean): void {\n        this.isLoading$$.next(isLoading);\n    }\n\n    getAll(): void{\n        this.setLoading(true);\n        this.coursesService.getAll().pipe(\n            tap(courses => {\n                this.courses$$.next(courses);\n                this.setLoading(false);\n      })\n    ).subscribe();\n        // Add your code here\n    }\n\n    createCourse(course: Course): void { // replace 'any' with the required interface\n        this.setLoading(true);\n        this.coursesService.createCourse(course).pipe(\n          tap(() => {\n            this.getAll();\n          })\n        ).subscribe();\n        // Add your code here\n    }\n\n    getCourse(id: string): Observable<any> {\n        // Add your code here\n        return this.coursesService.getCourse(id)\n    }\n\n    editCourse(id: string, course: Course): void { // replace 'any' with the required interface\n        this.setLoading(true);\n        this.coursesService.editCourse(id, course).pipe(\n            tap(() => {\n                this.getAll();\n      })\n    ).subscribe();\n        // Add your code here\n    }\n\n    deleteCourse(id: string): void {\n        this.setLoading(true);\n        this.coursesService.deleteCourse(id).pipe(\n            tap(() => {\n                this.getAll()\n            })\n        ).subscribe();\n        // Add your code here\n    }\n\n    filterCourses(value: string): void {\n        this.setLoading(true);\n        this.coursesService.filterCourses(value).pipe(\n            tap(courses => {\n                this.courses$$.next(courses);\n                this.setLoading(false);\n            })\n        ).subscribe();\n        // Add your code here\n    }\n\n    getAllAuthors(): void {\n        this.setLoading(true);\n        this.coursesService.getAllAuthors().pipe(\n            tap(() => {\n                this.setLoading(false);\n            })\n        ).subscribe()\n        // Add your code here\n    }\n\n    createAuthor(name: string): void {\n        this.setLoading(true);\n        this.coursesService.createAuthor(name).pipe(\n            tap(() => {\n                this.getAllAuthors();\n            })\n        ).subscribe()\n        // Add your code here\n    }\n\n    getAuthorById(id: string): Observable<any> {\n        return this.coursesService.getAuthorById(id)\n        // Add your code here\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}