{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./session-storage.service\";\nexport class AuthService {\n  constructor(http, sessionService) {\n    this.http = http;\n    this.sessionService = sessionService;\n    this.isAuthorized$$ = new BehaviorSubject(false);\n    this.isAuthorized$ = this.isAuthorized$$.asObservable();\n    this.isAuthorized$$.next(!!this.sessionService.getToken());\n  }\n  login(user) {\n    return this.http.post(\"http://localhost:4000/api/login\", user).pipe(map(response => {\n      this.sessionService.setToken(response.token);\n      this.isAuthorized = true;\n      return;\n    }));\n  }\n  logout() {\n    this.sessionService.deleteToken();\n    this.isAuthorized = false;\n  }\n  register(user) {\n    return this.http.post(\"http://localhost:4000/api/register\", user);\n  }\n  get isAuthorized() {\n    return this.isAuthorized$$.value;\n  }\n  set isAuthorized(value) {\n    this.isAuthorized$$.next(value);\n  }\n  getLoginUrl() {\n    return \"/login\";\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SessionStorageService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;;;;AAepC,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB,EAAUC,cAAqC;IAA/D,SAAI,GAAJD,IAAI;IAAsB,mBAAc,GAAdC,cAAc;IAHpD,mBAAc,GAAG,IAAIL,eAAe,CAAU,KAAK,CAAC;IACrD,kBAAa,GAAwB,IAAI,CAACM,cAAc,CAACC,YAAY,EAAE;IAG5E,IAAI,CAACD,cAAc,CAACE,IAAI,CAAC,CAAC,CAAC,IAAI,CAACH,cAAc,CAACI,QAAQ,EAAE,CAAC;EAC5D;EAEAC,KAAK,CAACC,IAAU;IACd,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAgB,iCAAiC,EAAED,IAAI,CAAC,CAACE,IAAI,CAChFZ,GAAG,CAAEa,QAAQ,IAAI;MACf,IAAI,CAACT,cAAc,CAACU,QAAQ,CAACD,QAAQ,CAACE,KAAK,CAAC;MAC5C,IAAI,CAACC,YAAY,GAAG,IAAI;MACxB;IACF,CAAC,CAAC,CACH;EACH;EAEAC,MAAM;IACJ,IAAI,CAACb,cAAc,CAACc,WAAW,EAAE;IACjC,IAAI,CAACF,YAAY,GAAG,KAAK;EAC3B;EAEAG,QAAQ,CAACT,IAAU;IACjB,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAO,oCAAoC,EAAED,IAAI,CAAC;EACzE;EAEA,IAAIM,YAAY;IACd,OAAO,IAAI,CAACX,cAAc,CAACe,KAAK;EAClC;EAEA,IAAIJ,YAAY,CAACI,KAAc;IAC7B,IAAI,CAACf,cAAc,CAACE,IAAI,CAACa,KAAK,CAAC;EACjC;EAEAC,WAAW;IACT,OAAO,QAAQ;EACjB;;AArCWpB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAqB,SAAXrB,WAAW;EAAAsB,YAFV;AAAM","names":["BehaviorSubject","map","AuthService","constructor","http","sessionService","isAuthorized$$","asObservable","next","getToken","login","user","post","pipe","response","setToken","token","isAuthorized","logout","deleteToken","register","value","getLoginUrl","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Isti\\Desktop\\epam-tasks\\angular-fundamentals-template\\src\\app\\auth\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { BehaviorSubject, Observable } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { SessionStorageService } from \"./session-storage.service\";\r\n\r\ninterface User {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ninterface LoginResponse {\r\n  token: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class AuthService {\r\n  private isAuthorized$$ = new BehaviorSubject<boolean>(false);\r\n  public isAuthorized$: Observable<boolean> = this.isAuthorized$$.asObservable();\r\n\r\n  constructor(private http: HttpClient, private sessionService: SessionStorageService) {\r\n    this.isAuthorized$$.next(!!this.sessionService.getToken());\r\n  }\r\n\r\n  login(user: User): Observable<void> {\r\n    return this.http.post<LoginResponse>(\"http://localhost:4000/api/login\", user).pipe(\r\n      map((response) => {\r\n        this.sessionService.setToken(response.token);\r\n        this.isAuthorized = true;\r\n        return;\r\n      })\r\n    );\r\n  }\r\n\r\n  logout(): void {\r\n    this.sessionService.deleteToken();\r\n    this.isAuthorized = false;\r\n  }\r\n\r\n  register(user: User): Observable<void> {\r\n    return this.http.post<void>(\"http://localhost:4000/api/register\", user);\r\n  }\r\n\r\n  get isAuthorized(): boolean {\r\n    return this.isAuthorized$$.value;\r\n  }\r\n\r\n  set isAuthorized(value: boolean) {\r\n    this.isAuthorized$$.next(value);\r\n  }\r\n\r\n  getLoginUrl(): string {\r\n    return \"/login\";\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}