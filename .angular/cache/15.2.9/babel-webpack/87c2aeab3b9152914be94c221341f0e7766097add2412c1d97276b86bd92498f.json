{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/store/courses/courses.facade\";\nimport * as i2 from \"@app/services/courses.service\";\nimport * as i3 from \"@app/user/services/user-store.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../../../shared/components/button/button.component\";\nimport * as i7 from \"../../../shared/components/search/search.component\";\nimport * as i8 from \"../../../shared/components/course-card/course-card.component\";\nfunction CoursesListComponent_app_course_card_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-course-card\", 4);\n    i0.ɵɵlistener(\"clickOnShow\", function CoursesListComponent_app_course_card_2_Template_app_course_card_clickOnShow_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.navigateToCourse($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const course_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"title\", course_r2.title)(\"description\", course_r2.description)(\"creationDate\", course_r2.creationDate)(\"duration\", course_r2.duration)(\"authors\", course_r2.authors)(\"editable\", ctx_r0.editable)(\"id\", course_r2.id);\n  }\n}\nfunction CoursesListComponent_app_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-button\", 5);\n  }\n}\nexport class CoursesListComponent {\n  /*\r\n  unused code from previous exercise:\r\n  @Output() showCourse = new EventEmitter<any>();\r\n  @Output() editCourse = new EventEmitter<any>();\r\n  @Output() deleteCourse = new EventEmitter<any>();\r\n  */\n  constructor(coursesFacade, coursesService, userStoreService, router) {\n    this.coursesFacade = coursesFacade;\n    this.coursesService = coursesService;\n    this.userStoreService = userStoreService;\n    this.router = router;\n    this.courses = [];\n    this.authors = [];\n    this.editable = false;\n  }\n  ngOnInit() {\n    this.userStoreService.getUser();\n    this.userStoreService.isAdmin$.subscribe(isAdmin => {\n      this.editable = isAdmin;\n    });\n    this.coursesFacade.allCourses$.subscribe(courses => {\n      this.courses = courses;\n    });\n    this.coursesFacade.getAllCourses();\n  }\n  /*\r\n  unused code from previous exercise: author name display\r\n  \r\n  fetchAuthorsAndMap(): void {\r\n    this.coursesService.getAllAuthors().subscribe(\r\n      authorResponse => {\r\n        this.authors = authorResponse.result;\r\n        this.mapAuthorsToCourses();\r\n      },\r\n      error => {\r\n        console.log('Error fetching authors:', error);\r\n      }\r\n    );\r\n  }\r\n      mapAuthorsToCourses(): void {\r\n    this.courses.forEach(course => {\r\n      course.authors = course.authors.map((authorId: any) => {\r\n        const author = this.authors.find(a => a.id === authorId);\r\n        return author ? author.name : 'Unknown Author';\r\n      });\r\n    });\r\n  } */\n  onSearch(value) {\n    this.coursesFacade.getFilteredCourses(value);\n  }\n  navigateToCourse(courseId) {\n    this.router.navigate([`courses/${courseId}`]);\n  }\n}\nCoursesListComponent.ɵfac = function CoursesListComponent_Factory(t) {\n  return new (t || CoursesListComponent)(i0.ɵɵdirectiveInject(i1.CoursesStateFacade), i0.ɵɵdirectiveInject(i2.CoursesService), i0.ɵɵdirectiveInject(i3.UserStoreService), i0.ɵɵdirectiveInject(i4.Router));\n};\nCoursesListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CoursesListComponent,\n  selectors: [[\"app-courses-list\"]],\n  inputs: {\n    editable: \"editable\"\n  },\n  decls: 4,\n  vars: 2,\n  consts: [[\"placeholder\", \"Search courses\", 3, \"search\"], [1, \"courses-list\"], [3, \"title\", \"description\", \"creationDate\", \"duration\", \"authors\", \"editable\", \"id\", \"clickOnShow\", 4, \"ngFor\", \"ngForOf\"], [\"buttonText\", \"Add course\", \"routerLink\", \"/courses/add\", 4, \"ngIf\"], [3, \"title\", \"description\", \"creationDate\", \"duration\", \"authors\", \"editable\", \"id\", \"clickOnShow\"], [\"buttonText\", \"Add course\", \"routerLink\", \"/courses/add\"]],\n  template: function CoursesListComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"app-search\", 0);\n      i0.ɵɵlistener(\"search\", function CoursesListComponent_Template_app_search_search_0_listener($event) {\n        return ctx.onSearch($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵtemplate(2, CoursesListComponent_app_course_card_2_Template, 1, 7, \"app-course-card\", 2);\n      i0.ɵɵtemplate(3, CoursesListComponent_app_button_3_Template, 1, 0, \"app-button\", 3);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.courses);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.editable);\n    }\n  },\n  dependencies: [i5.NgForOf, i5.NgIf, i6.ButtonComponent, i7.SearchComponent, i8.CourseCardComponent, i4.RouterLink],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;;;;;;;;IAEIA,0CAQyC;IAAzCA;MAAAA;MAAA;MAAA,OAAeA,8CAAwB;IAAA,EAAC;IACxCA,iBAAkB;;;;;IARlBA,uCAAsB;;;;;IAStBA,gCAA4F;;;ACAhG,OAAM,MAAOC,oBAAoB;EAM/B;;;;;;EAMAC,YAAqBC,aAAiC,EAAUC,cAA8B,EAAUC,gBAAkC,EAAUC,MAAc;IAA7I,kBAAa,GAAbH,aAAa;IAA8B,mBAAc,GAAdC,cAAc;IAA0B,qBAAgB,GAAhBC,gBAAgB;IAA4B,WAAM,GAANC,MAAM;IAV1J,YAAO,GAAU,EAAE;IACnB,YAAO,GAAU,EAAE;IAEV,aAAQ,GAAY,KAAK;EAOmI;EAGrKC,QAAQ;IACN,IAAI,CAACF,gBAAgB,CAACG,OAAO,EAAE;IAC/B,IAAI,CAACH,gBAAgB,CAACI,QAAQ,CAACC,SAAS,CAAEC,OAAO,IAAI;MACnD,IAAI,CAACC,QAAQ,GAAGD,OAAO;IACzB,CAAC,CAAC;IAEF,IAAI,CAACR,aAAa,CAACU,WAAW,CAACH,SAAS,CACtCI,OAAO,IAAG;MACR,IAAI,CAACA,OAAO,GAAGA,OAAO;IACxB,CAAC,CAAC;IAEF,IAAI,CAACX,aAAa,CAACY,aAAa,EAAE;EACtC;EAEA;;;;;;;;;;;;;;;;;;;;;;EAwBAC,QAAQ,CAACC,KAAa;IACpB,IAAI,CAACd,aAAa,CAACe,kBAAkB,CAACD,KAAK,CAAC;EAC9C;EAEAE,gBAAgB,CAACC,QAAa;IAC5B,IAAI,CAACd,MAAM,CAACe,QAAQ,CAAC,CAAC,WAAWD,QAAQ,EAAE,CAAC,CAAC;EAC/C;;AA3DWnB,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;QAApBA,oBAAoB;EAAAqB;EAAAC;IAAAX;EAAA;EAAAY;EAAAC;EAAAC;EAAAC;IAAA;MDZjC3B,qCAAqE;MAA5BA;QAAA,OAAU4B,oBAAgB;MAAA,EAAC;MAAC5B,iBAAa;MAClFA,8BAA0B;MACtBA,6FASkB;MAClBA,mFAA4F;MAChGA,iBAAM;;;MAXkCA,eAAU;MAAVA,qCAAU;MAUjCA,eAAc;MAAdA,mCAAc","names":["i0","CoursesListComponent","constructor","coursesFacade","coursesService","userStoreService","router","ngOnInit","getUser","isAdmin$","subscribe","isAdmin","editable","allCourses$","courses","getAllCourses","onSearch","value","getFilteredCourses","navigateToCourse","courseId","navigate","selectors","inputs","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Isti\\Desktop\\epam-tasks\\angular-fundamentals-template\\src\\app\\features\\courses\\courses-list\\courses-list.component.html","C:\\Users\\Isti\\Desktop\\epam-tasks\\angular-fundamentals-template\\src\\app\\features\\courses\\courses-list\\courses-list.component.ts"],"sourcesContent":["<app-search placeholder=\"Search courses\" (search)=\"onSearch($event)\"></app-search>\n<div class=\"courses-list\">\n    <app-course-card *ngFor=\"let course of courses\"\n    [title]=\"course.title\" \n    [description]=\"course.description\"\n    [creationDate]=\"course.creationDate\"\n    [duration]=\"course.duration\"\n    [authors]=\"course.authors\"\n    [editable]=\"editable\"\n    [id]=\"course.id\"\n    (clickOnShow)=\"navigateToCourse($event)\">    \n    </app-course-card>\n    <app-button *ngIf=\"editable\" buttonText=\"Add course\" routerLink=\"/courses/add\"></app-button>\n</div>","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { CoursesService } from '@app/services/courses.service';\nimport { UserStoreService } from '@app/user/services/user-store.service';\nimport { Router } from '@angular/router';\nimport { CoursesStateFacade } from '@app/store/courses/courses.facade';\n\n\n@Component({\n  selector: 'app-courses-list',\n  templateUrl: './courses-list.component.html',\n  styleUrls: ['./courses-list.component.css']\n})\nexport class CoursesListComponent implements OnInit{\n\n  courses: any[] = []\n  authors: any[] = []\n\n  @Input() editable: boolean = false;\n  /* \n  unused code from previous exercise:\n  @Output() showCourse = new EventEmitter<any>();\n  @Output() editCourse = new EventEmitter<any>();\n  @Output() deleteCourse = new EventEmitter<any>();\n */\n  constructor( private coursesFacade: CoursesStateFacade, private coursesService: CoursesService, private userStoreService: UserStoreService, private router: Router) {}\n  \n\n  ngOnInit(): void {\n    this.userStoreService.getUser();\n    this.userStoreService.isAdmin$.subscribe((isAdmin) => {\n      this.editable = isAdmin;\n    });\n\n    this.coursesFacade.allCourses$.subscribe(\n      courses => {\n        this.courses = courses;\n      });\n\n      this.coursesFacade.getAllCourses();\n  }\n\n  /* \n  unused code from previous exercise: author name display\n  \n  fetchAuthorsAndMap(): void {\n    this.coursesService.getAllAuthors().subscribe(\n      authorResponse => {\n        this.authors = authorResponse.result;\n        this.mapAuthorsToCourses();\n      },\n      error => {\n        console.log('Error fetching authors:', error);\n      }\n    );\n  }\n\n  mapAuthorsToCourses(): void {\n    this.courses.forEach(course => {\n      course.authors = course.authors.map((authorId: any) => {\n        const author = this.authors.find(a => a.id === authorId);\n        return author ? author.name : 'Unknown Author';\n      });\n    });\n  } */\n\n  onSearch(value: string): void {\n    this.coursesFacade.getFilteredCourses(value);\n  }\n\n  navigateToCourse(courseId: any): void {\n    this.router.navigate([`courses/${courseId}`]);\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}