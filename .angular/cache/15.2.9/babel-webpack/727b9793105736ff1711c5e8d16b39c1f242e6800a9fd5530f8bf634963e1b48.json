{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./session-storage.service\";\nexport class AuthService {\n  constructor(http, sessionService) {\n    this.http = http;\n    this.sessionService = sessionService;\n    this.isAuthorized$$ = new BehaviorSubject(false);\n    this.isAuthorized$ = this.isAuthorized$$.asObservable();\n  }\n  login(user) {\n    return this.http.post(\"http://localhost:4000/api/auth/login\", {\n      email: user.email,\n      password: user.password\n    });\n  }\n  logout() {\n    this.sessionService.deleteToken();\n    this.isAuthorised = false;\n  }\n  register(user) {\n    return this.http.post(\"http://localhost:4000/api/auth/register\", {\n      email: user.email,\n      password: user.password\n    });\n  }\n  get isAuthorised() {\n    return this.isAuthorized$$.value;\n  }\n  set isAuthorised(value) {\n    this.isAuthorized$$.next(value);\n  }\n  getLoginUrl() {\n    return \"/login\";\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SessionStorageService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;;;;AAWlD,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB,EAAUC,cAAqC;IAA/D,SAAI,GAAJD,IAAI;IAAsB,mBAAc,GAAdC,cAAc;IAHpD,mBAAc,GAAG,IAAIJ,eAAe,CAAU,KAAK,CAAC;IACrD,kBAAa,GAAwB,IAAI,CAACK,cAAc,CAACC,YAAY,EAAE;EAEQ;EAEtFC,KAAK,CAACC,IAAU;IACd,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAC,sCAAsC,EAAE;MAAEC,KAAK,EAAEF,IAAI,CAACE,KAAK;MAAEC,QAAQ,EAAEH,IAAI,CAACG;IAAQ,CAAE,CAAC;EAC/G;EAEAC,MAAM;IACJ,IAAI,CAACR,cAAc,CAACS,WAAW,EAAE;IACjC,IAAI,CAACC,YAAY,GAAG,KAAK;EAC3B;EAEAC,QAAQ,CAACP,IAAU;IACjB,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAC,yCAAyC,EAAE;MAAEC,KAAK,EAAEF,IAAI,CAACE,KAAK;MAAEC,QAAQ,EAAEH,IAAI,CAACG;IAAQ,CAAE,CAAC;EAClH;EAEA,IAAIG,YAAY;IACd,OAAO,IAAI,CAACT,cAAc,CAACW,KAAK;EAClC;EAEA,IAAIF,YAAY,CAACE,KAAc;IAC7B,IAAI,CAACX,cAAc,CAACY,IAAI,CAACD,KAAK,CAAC;EACjC;EAEAE,WAAW;IACT,OAAO,QAAQ;EACjB;;AA7BWjB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAkB,SAAXlB,WAAW;EAAAmB,YAFV;AAAM","names":["BehaviorSubject","AuthService","constructor","http","sessionService","isAuthorized$$","asObservable","login","user","post","email","password","logout","deleteToken","isAuthorised","register","value","next","getLoginUrl","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Isti\\Desktop\\epam-tasks\\angular-fundamentals-template\\src\\app\\auth\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { BehaviorSubject, Observable } from \"rxjs\";\r\nimport { SessionStorageService } from \"./session-storage.service\";\r\n\r\ninterface User {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class AuthService {\r\n  private isAuthorized$$ = new BehaviorSubject<boolean>(false);\r\n  public isAuthorized$: Observable<boolean> = this.isAuthorized$$.asObservable();\r\n\r\n  constructor(private http: HttpClient, private sessionService: SessionStorageService) {}\r\n\r\n  login(user: User) {\r\n    return this.http.post(\"http://localhost:4000/api/auth/login\", { email: user.email, password: user.password });\r\n  }\r\n\r\n  logout() {\r\n    this.sessionService.deleteToken();\r\n    this.isAuthorised = false;\r\n  }\r\n\r\n  register(user: User) {\r\n    return this.http.post(\"http://localhost:4000/api/auth/register\", { email: user.email, password: user.password });\r\n  }\r\n\r\n  get isAuthorised() {\r\n    return this.isAuthorized$$.value;\r\n  }\r\n\r\n  set isAuthorised(value: boolean) {\r\n    this.isAuthorized$$.next(value);\r\n  }\r\n\r\n  getLoginUrl() {\r\n    return \"/login\";\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}