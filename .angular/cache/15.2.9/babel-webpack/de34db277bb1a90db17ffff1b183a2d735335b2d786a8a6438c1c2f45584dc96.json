{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/session-storage.service\";\nimport * as i2 from \"../services/auth.service\";\nimport * as i3 from \"@angular/router\";\nexport class TokenInterceptor {\n  constructor(sessionStorageService, authService, router) {\n    this.sessionStorageService = sessionStorageService;\n    this.authService = authService;\n    this.router = router;\n  }\n  intercept(req, next) {\n    const token = this.sessionStorageService.getToken();\n    let request = req;\n    if (token) {\n      request = req.clone({\n        setHeaders: {\n          Authorization: `${token}`\n        }\n      });\n    }\n    return next.handle(request).pipe(catchError(error => {\n      if (error.status === 401) {\n        this.authService.logout();\n        this.router.navigate(['/login']);\n      }\n      return throwError(error);\n    }));\n  }\n}\nTokenInterceptor.ɵfac = function TokenInterceptor_Factory(t) {\n  return new (t || TokenInterceptor)(i0.ɵɵinject(i1.SessionStorageService), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.Router));\n};\nTokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TokenInterceptor,\n  factory: TokenInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;;;AAM3C,OAAM,MAAOC,gBAAgB;EAE3BC,YAAoBC,qBAA4C,EAAUC,WAAwB,EAAUC,MAAc;IAAtG,0BAAqB,GAArBF,qBAAqB;IAAiC,gBAAW,GAAXC,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAW;EAE7HC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAChD,MAAMC,KAAK,GAAG,IAAI,CAACN,qBAAqB,CAACO,QAAQ,EAAE;IAEnD,IAAIC,OAAO,GAAGJ,GAAG;IACjB,IAAIE,KAAK,EAAE;MACTE,OAAO,GAAGJ,GAAG,CAACK,KAAK,CAAC;QAClBC,UAAU,EAAE;UACVC,aAAa,EAAE,GAAGL,KAAK;;OAE1B,CAAC;;IAIJ,OAAOD,IAAI,CAACO,MAAM,CAACJ,OAAO,CAAC,CAACK,IAAI,CAC9BhB,UAAU,CAAEiB,KAAwB,IAAI;MACtC,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACxB,IAAI,CAACd,WAAW,CAACe,MAAM,EAAE;QACzB,IAAI,CAACd,MAAM,CAACe,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;MAElC,OAAOrB,UAAU,CAACkB,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACH;;AA1BWhB,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAoB,SAAhBpB,gBAAgB;AAAA","names":["throwError","catchError","TokenInterceptor","constructor","sessionStorageService","authService","router","intercept","req","next","token","getToken","request","clone","setHeaders","Authorization","handle","pipe","error","status","logout","navigate","factory"],"sourceRoot":"","sources":["C:\\Users\\Isti\\Desktop\\epam-tasks\\angular-fundamentals-template\\src\\app\\auth\\interceptors\\token.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { SessionStorageService } from '../services/session-storage.service';\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n\n  constructor(private sessionStorageService: SessionStorageService, private authService: AuthService, private router: Router) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const token = this.sessionStorageService.getToken();\n\n    let request = req;\n    if (token) {\n      request = req.clone({\n        setHeaders: {\n          Authorization: `${token}`\n        }\n      });\n    }\n\n \n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (error.status === 401) {\n          this.authService.logout();\n          this.router.navigate(['/login']);\n        }\n        return throwError(error);\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}