{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthorizedGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canLoad(route, segments) {\n    if (this.authService.isAuthorised) {\n      return true;\n    } else {\n      return this.router.createUrlTree(['/login']);\n    }\n  }\n}\nAuthorizedGuard.ɵfac = function AuthorizedGuard_Factory(t) {\n  return new (t || AuthorizedGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAuthorizedGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthorizedGuard,\n  factory: AuthorizedGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,eAAe;EAE1BC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAW;EAEvEC,OAAO,CACLC,KAAY,EACZC,QAAsB;IAEtB,IAAI,IAAI,CAACJ,WAAW,CAACK,YAAY,EAAE;MACjC,OAAO,IAAI;KACZ,MAAM;MACL,OAAO,IAAI,CAACJ,MAAM,CAACK,aAAa,CAAC,CAAC,QAAQ,CAAC,CAAC;;EAEhD;;AAbWR,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAS,SAAfT,eAAe;EAAAU,YAFd;AAAM","names":["AuthorizedGuard","constructor","authService","router","canLoad","route","segments","isAuthorised","createUrlTree","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Isti\\Desktop\\epam-tasks\\angular-fundamentals-template\\src\\app\\auth\\guards\\authorized.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanLoad, Route, UrlSegment, Router, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthorizedGuard implements CanLoad {\n\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canLoad(\n    route: Route,\n    segments: UrlSegment[]\n  ): boolean | UrlTree | Observable<boolean | UrlTree> {\n    if (this.authService.isAuthorised) {\n      return true;\n    } else {\n      return this.router.createUrlTree(['/login']);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}