{"ast":null,"code":"import { HttpParams } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CoursesService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = \"http://localhost:4000/api/courses\";\n  }\n  getAll() {\n    return this.http.get(`${this.baseUrl}/all`);\n  }\n  createCourse(course) {\n    return this.http.post(`${this.baseUrl}/add`, course);\n  }\n  editCourse(id, course) {\n    return this.http.put(`${this.baseUrl}/${id}`, course);\n  }\n  getCourse(id) {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n  deleteCourse(id) {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n  filterCourses(filters) {\n    let params = new HttpParams();\n    for (const key in filters) {\n      if (filters.hasOwnProperty(key)) {\n        filters[key].forEach(value => {\n          params = params.append(key, value);\n        });\n      }\n    }\n    return this.http.get(`${this.baseUrl}/filter`, {\n      params\n    });\n  }\n  getAllAuthors() {\n    return this.http.get(`${this.baseUrl}/authors`);\n  }\n  createAuthor(name) {\n    return this.http.post(`${this.baseUrl}/authors`, {\n      name\n    });\n  }\n  getAuthorById(id) {\n    return this.http.get(`${this.baseUrl}/authors/${id}`);\n  }\n}\nCoursesService.ɵfac = function CoursesService_Factory(t) {\n  return new (t || CoursesService)(i0.ɵɵinject(i1.HttpClient));\n};\nCoursesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CoursesService,\n  factory: CoursesService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;;;AAM7D,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,YAAO,GAAG,mCAAmC;EAEd;EAEvCC,MAAM;IACJ,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAC,GAAG,IAAI,CAACC,OAAO,MAAM,CAAC;EAC7C;EAEAC,YAAY,CAACC,MAAW;IACtB,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAC,GAAG,IAAI,CAACH,OAAO,MAAM,EAAEE,MAAM,CAAC;EACtD;EAEAE,UAAU,CAACC,EAAU,EAAEH,MAAW;IAChC,OAAO,IAAI,CAACL,IAAI,CAACS,GAAG,CAAC,GAAG,IAAI,CAACN,OAAO,IAAIK,EAAE,EAAE,EAAEH,MAAM,CAAC;EACvD;EAEAK,SAAS,CAACF,EAAU;IAClB,OAAO,IAAI,CAACR,IAAI,CAACE,GAAG,CAAC,GAAG,IAAI,CAACC,OAAO,IAAIK,EAAE,EAAE,CAAC;EAC/C;EAEAG,YAAY,CAACH,EAAU;IACrB,OAAO,IAAI,CAACR,IAAI,CAACY,MAAM,CAAC,GAAG,IAAI,CAACT,OAAO,IAAIK,EAAE,EAAE,CAAC;EAClD;EAEAK,aAAa,CAACC,OAAoC;IAChD,IAAIC,MAAM,GAAG,IAAIlB,UAAU,EAAE;IAC7B,KAAK,MAAMmB,GAAG,IAAIF,OAAO,EAAE;MACzB,IAAIA,OAAO,CAACG,cAAc,CAACD,GAAG,CAAC,EAAE;QAC/BF,OAAO,CAACE,GAAG,CAAC,CAACE,OAAO,CAAEC,KAAK,IAAI;UAC7BJ,MAAM,GAAGA,MAAM,CAACK,MAAM,CAACJ,GAAG,EAAEG,KAAK,CAAC;QACpC,CAAC,CAAC;;;IAGN,OAAO,IAAI,CAACnB,IAAI,CAACE,GAAG,CAAC,GAAG,IAAI,CAACC,OAAO,SAAS,EAAE;MAAEY;IAAM,CAAE,CAAC;EAC5D;EAEAM,aAAa;IACX,OAAO,IAAI,CAACrB,IAAI,CAACE,GAAG,CAAC,GAAG,IAAI,CAACC,OAAO,UAAU,CAAC;EACjD;EAEAmB,YAAY,CAACC,IAAY;IACvB,OAAO,IAAI,CAACvB,IAAI,CAACM,IAAI,CAAC,GAAG,IAAI,CAACH,OAAO,UAAU,EAAE;MAAEoB;IAAI,CAAE,CAAC;EAC5D;EAEAC,aAAa,CAAChB,EAAU;IACtB,OAAO,IAAI,CAACR,IAAI,CAACE,GAAG,CAAC,GAAG,IAAI,CAACC,OAAO,YAAYK,EAAE,EAAE,CAAC;EACvD;;AA/CWV,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAA2B,SAAd3B,cAAc;EAAA4B,YAFb;AAAM","names":["HttpParams","CoursesService","constructor","http","getAll","get","baseUrl","createCourse","course","post","editCourse","id","put","getCourse","deleteCourse","delete","filterCourses","filters","params","key","hasOwnProperty","forEach","value","append","getAllAuthors","createAuthor","name","getAuthorById","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Isti\\Desktop\\epam-tasks\\angular-fundamentals-template\\src\\app\\services\\courses.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class CoursesService {\r\n  private baseUrl = \"http://localhost:4000/api/courses\";\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAll(): Observable<any> {\r\n    return this.http.get(`${this.baseUrl}/all`);\r\n  }\r\n\r\n  createCourse(course: any): Observable<any> {\r\n    return this.http.post(`${this.baseUrl}/add`, course);\r\n  }\r\n\r\n  editCourse(id: string, course: any): Observable<any> {\r\n    return this.http.put(`${this.baseUrl}/${id}`, course);\r\n  }\r\n\r\n  getCourse(id: string): Observable<any> {\r\n    return this.http.get(`${this.baseUrl}/${id}`);\r\n  }\r\n\r\n  deleteCourse(id: string): Observable<any> {\r\n    return this.http.delete(`${this.baseUrl}/${id}`);\r\n  }\r\n\r\n  filterCourses(filters: { [key: string]: string[] }): Observable<any> {\r\n    let params = new HttpParams();\r\n    for (const key in filters) {\r\n      if (filters.hasOwnProperty(key)) {\r\n        filters[key].forEach((value) => {\r\n          params = params.append(key, value);\r\n        });\r\n      }\r\n    }\r\n    return this.http.get(`${this.baseUrl}/filter`, { params });\r\n  }\r\n\r\n  getAllAuthors(): Observable<any> {\r\n    return this.http.get(`${this.baseUrl}/authors`);\r\n  }\r\n\r\n  createAuthor(name: string): Observable<any> {\r\n    return this.http.post(`${this.baseUrl}/authors`, { name });\r\n  }\r\n\r\n  getAuthorById(id: string): Observable<any> {\r\n    return this.http.get(`${this.baseUrl}/authors/${id}`);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}