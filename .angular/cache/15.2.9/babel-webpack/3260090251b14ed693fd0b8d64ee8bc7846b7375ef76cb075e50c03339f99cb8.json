{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { Validators } from \"@angular/forms\";\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\nlet CourseFormComponent = class CourseFormComponent {\n  constructor(fb, library) {\n    this.fb = fb;\n    this.library = library;\n    this.availableAuthors = [{\n      id: 1,\n      name: \"Author 1\"\n    }, {\n      id: 2,\n      name: \"Author 2\"\n    }];\n    this.courseAuthors = [];\n    this.library.addIconPacks(fas);\n    this.courseForm = this.fb.group({\n      title: [\"\", [Validators.required, Validators.minLength(2)]],\n      description: [\"\", [Validators.required, Validators.minLength(2)]],\n      author: [\"\", [Validators.pattern(\"^[a-zA-Z0-9 ]*$\")]],\n      authors: this.fb.array([]),\n      duration: [0, [Validators.required, Validators.min(0)]]\n    });\n  }\n  get title() {\n    return this.courseForm.get(\"title\");\n  }\n  get description() {\n    return this.courseForm.get(\"description\");\n  }\n  get author() {\n    return this.courseForm.get(\"author\");\n  }\n  get authors() {\n    return this.courseForm.get(\"authors\");\n  }\n  get duration() {\n    return this.courseForm.get(\"duration\");\n  }\n  addAuthor(author) {\n    this.courseAuthors.push(author);\n    this.availableAuthors = this.availableAuthors.filter(a => a.id !== author.id);\n    this.authors.push(this.fb.control(author));\n  }\n  removeAuthor(author) {\n    this.availableAuthors.push(author);\n    this.courseAuthors = this.courseAuthors.filter(a => a.id !== author.id);\n    const index = this.authors.controls.findIndex(control => control.value.id === author.id);\n    this.authors.removeAt(index);\n  }\n  createAuthor() {\n    if (this.author?.valid) {\n      const newAuthor = {\n        id: Math.floor(Math.random() * 1000),\n        name: this.author?.value\n      };\n      this.availableAuthors.push(newAuthor);\n      this.author?.reset();\n    }\n  }\n  isControlInvalid(control) {\n    return !!(control && control.invalid && (control.touched || control.dirty));\n  }\n  onSubmit() {\n    if (this.courseForm.valid) {\n      console.log(\"Form Submitted:\", this.courseForm.value);\n    } else {\n      console.error(\"Form is invalid\");\n    }\n  }\n  formatDuration(minutes) {\n    if (minutes <= 0) return \"00:00\";\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return `${hours.toString().padStart(2, \"0\")}:${mins.toString().padStart(2, \"0\")}`;\n  }\n};\nCourseFormComponent = __decorate([Component({\n  selector: \"app-course-form\",\n  templateUrl: \"./course-form.component.html\",\n  styleUrls: [\"./course-form.component.scss\"]\n})], CourseFormComponent);\nexport { CourseFormComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","fas","CourseFormComponent","constructor","fb","library","id","name","addIconPacks","courseForm","group","title","required","minLength","description","author","pattern","authors","array","duration","min","get","addAuthor","courseAuthors","push","availableAuthors","filter","a","control","removeAuthor","index","controls","findIndex","value","removeAt","createAuthor","valid","newAuthor","Math","floor","random","reset","isControlInvalid","invalid","touched","dirty","onSubmit","console","log","error","formatDuration","minutes","hours","mins","toString","padStart","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Isti\\Desktop\\epam-tasks\\angular-fundamentals-template\\src\\app\\shared\\components\\course-form\\course-form.component.ts"],"sourcesContent":["import { Component } from \"@angular/core\";\r\nimport { FormBuilder, FormGroup, FormArray, Validators, AbstractControl } from \"@angular/forms\";\r\nimport { FaIconLibrary } from \"@fortawesome/angular-fontawesome\";\r\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n@Component({\r\n  selector: \"app-course-form\",\r\n  templateUrl: \"./course-form.component.html\",\r\n  styleUrls: [\"./course-form.component.scss\"],\r\n})\r\nexport class CourseFormComponent {\r\n  courseForm: FormGroup;\r\n\r\n  availableAuthors: { id: number; name: string }[] = [\r\n    { id: 1, name: \"Author 1\" },\r\n    { id: 2, name: \"Author 2\" },\r\n  ];\r\n\r\n  courseAuthors: { id: number; name: string }[] = [];\r\n\r\n  constructor(private fb: FormBuilder, private library: FaIconLibrary) {\r\n    this.library.addIconPacks(fas);\r\n    this.courseForm = this.fb.group({\r\n      title: [\"\", [Validators.required, Validators.minLength(2)]],\r\n      description: [\"\", [Validators.required, Validators.minLength(2)]],\r\n      author: [\"\", [Validators.pattern(\"^[a-zA-Z0-9 ]*$\")]], // Validation for Latin letters/numbers\r\n      authors: this.fb.array([]), // Will use FormArray to handle added authors\r\n      duration: [0, [Validators.required, Validators.min(0)]],\r\n    });\r\n  }\r\n\r\n  get title() {\r\n    return this.courseForm.get(\"title\");\r\n  }\r\n\r\n  get description() {\r\n    return this.courseForm.get(\"description\");\r\n  }\r\n\r\n  get author() {\r\n    return this.courseForm.get(\"author\");\r\n  }\r\n\r\n  get authors() {\r\n    return this.courseForm.get(\"authors\") as FormArray;\r\n  }\r\n\r\n  get duration() {\r\n    return this.courseForm.get(\"duration\");\r\n  }\r\n\r\n  addAuthor(author: any) {\r\n    this.courseAuthors.push(author);\r\n    this.availableAuthors = this.availableAuthors.filter((a) => a.id !== author.id);\r\n    this.authors.push(this.fb.control(author));\r\n  }\r\n\r\n  removeAuthor(author: any) {\r\n    this.availableAuthors.push(author);\r\n    this.courseAuthors = this.courseAuthors.filter((a) => a.id !== author.id);\r\n    const index = this.authors.controls.findIndex((control) => control.value.id === author.id);\r\n    this.authors.removeAt(index);\r\n  }\r\n\r\n  createAuthor() {\r\n    if (this.author?.valid) {\r\n      const newAuthor = {\r\n        id: Math.floor(Math.random() * 1000),\r\n        name: this.author?.value,\r\n      };\r\n      this.availableAuthors.push(newAuthor);\r\n      this.author?.reset();\r\n    }\r\n  }\r\n\r\n  isControlInvalid(control: AbstractControl | null): boolean {\r\n    return !!(control && control.invalid && (control.touched || control.dirty));\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.courseForm.valid) {\r\n      console.log(\"Form Submitted:\", this.courseForm.value);\r\n    } else {\r\n      console.error(\"Form is invalid\");\r\n    }\r\n  }\r\n\r\n  formatDuration(minutes: number): string {\r\n    if (minutes <= 0) return \"00:00\";\r\n    const hours = Math.floor(minutes / 60);\r\n    const mins = minutes % 60;\r\n    return `${hours.toString().padStart(2, \"0\")}:${mins.toString().padStart(2, \"0\")}`;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}