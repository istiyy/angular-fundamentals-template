{"ast":null,"code":"import { createEffect, ofType } from \"@ngrx/effects\";\nimport { catchError, map, mergeMap, switchMap } from \"rxjs/operators\";\nimport { of } from \"rxjs\";\nimport * as CoursesActions from \"./courses.actions\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@app/services/courses.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@ngrx/store\";\nimport * as i5 from \"./courses.facade\";\nexport class CoursesEffects {\n  constructor(actions$, coursesService, router, store, coursesFacade) {\n    this.actions$ = actions$;\n    this.coursesService = coursesService;\n    this.router = router;\n    this.store = store;\n    this.coursesFacade = coursesFacade;\n    this.getAll$ = createEffect(() => this.actions$.pipe(ofType(CoursesActions.requestAllCourses), mergeMap(() => this.coursesService.getAll().pipe(map(response => CoursesActions.requestAllCoursesSuccess({\n      courses: response.result\n    })), catchError(error => of(CoursesActions.requestAllCoursesFail({\n      error\n    })))))));\n    this.filteredCourses$ = createEffect(() => this.actions$.pipe(ofType(CoursesActions.requestFilteredCourses), switchMap(action => this.coursesService.filterCourses(action.searchValue).pipe(map(response => {\n      const filteredCourses = response.result;\n      return CoursesActions.requestFilteredCoursesSuccess({\n        courses: filteredCourses\n      });\n    }), catchError(error => {\n      console.log(\"Error fetching filtered courses:\", error);\n      return of(CoursesActions.requestFilteredCoursesFail({\n        error\n      }));\n    })))));\n    this.getSpecificCourse$ = createEffect(() => this.actions$.pipe(ofType(CoursesActions.requestSingleCourse), mergeMap(action => this.coursesService.getCourse(action.id).pipe(map(response => CoursesActions.requestSingleCourseSuccess({\n      course: response.result\n    })), catchError(error => of(CoursesActions.requestSingleCourseFail({\n      error\n    })))))));\n    this.deleteCourse$ = createEffect(() => this.actions$.pipe(ofType(CoursesActions.requestDeleteCourse), mergeMap(action => this.coursesService.deleteCourse(action.id).pipe(map(() => CoursesActions.requestAllCourses()), catchError(error => of(CoursesActions.requestDeleteCourseFail({\n      error\n    })))))));\n    this.editCourse$ = createEffect(() => this.actions$.pipe(ofType(CoursesActions.requestEditCourse), mergeMap(action => this.coursesService.editCourse(action.id, action.course).pipe(map(course => CoursesActions.requestEditCourseSuccess({\n      course\n    })), catchError(error => of(CoursesActions.requestEditCourseFail({\n      error\n    })))))));\n    this.createCourse$ = createEffect(() => this.actions$.pipe(ofType(CoursesActions.requestCreateCourse), mergeMap(action => this.coursesService.createCourse(action.course).pipe(map(course => CoursesActions.requestEditCourseSuccess({\n      course\n    })), catchError(error => of(CoursesActions.requestEditCourseFail({\n      error\n    })))))));\n    this.redirectToTheCoursePage$ = createEffect(() => this.actions$.pipe(ofType(CoursesActions.requestCreateCourseSuccess, CoursesActions.requestEditCourseSuccess, CoursesActions.requestSingleCourseFail), map(() => {\n      this.router.navigate([\"/courses\"]);\n    })), {\n      dispatch: false\n    });\n  }\n}\nCoursesEffects.ɵfac = function CoursesEffects_Factory(t) {\n  return new (t || CoursesEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.CoursesService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.Store), i0.ɵɵinject(i5.CoursesStateFacade));\n};\nCoursesEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CoursesEffects,\n  factory: CoursesEffects.ɵfac\n});","map":{"version":3,"mappings":"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","names":["createEffect","ofType","catchError","map","mergeMap","switchMap","of","CoursesActions","CoursesEffects","constructor","actions$","coursesService","router","store","coursesFacade","pipe","requestAllCourses","getAll","response","requestAllCoursesSuccess","courses","result","error","requestAllCoursesFail","requestFilteredCourses","action","filterCourses","searchValue","filteredCourses","requestFilteredCoursesSuccess","console","log","requestFilteredCoursesFail","requestSingleCourse","getCourse","id","requestSingleCourseSuccess","course","requestSingleCourseFail","requestDeleteCourse","deleteCourse","requestDeleteCourseFail","requestEditCourse","editCourse","requestEditCourseSuccess","requestEditCourseFail","requestCreateCourse","createCourse","requestCreateCourseSuccess","navigate","dispatch","factory"],"sourceRoot":"","sources":["C:\\Users\\Isti\\Desktop\\epam-tasks\\angular-fundamentals-template\\src\\app\\store\\courses\\courses.effects.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Actions, createEffect, ofType } from \"@ngrx/effects\";\nimport { catchError, map, mergeMap, switchMap, withLatestFrom } from \"rxjs/operators\";\nimport { of } from \"rxjs\";\nimport * as CoursesActions from \"./courses.actions\";\nimport { CoursesService } from \"@app/services/courses.service\";\nimport { Store } from \"@ngrx/store\";\nimport { CoursesState } from \"./courses.reducer\";\nimport { Router } from \"@angular/router\";\nimport { CoursesStateFacade } from \"./courses.facade\";\n\n@Injectable()\nexport class CoursesEffects {\n  constructor(\n    private actions$: Actions,\n    private coursesService: CoursesService,\n    private router: Router,\n    private store: Store<CoursesState>,\n    private coursesFacade: CoursesStateFacade\n  ) {}\n\n  getAll$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CoursesActions.requestAllCourses),\n      mergeMap(() =>\n        this.coursesService.getAll().pipe(\n          map((response) => CoursesActions.requestAllCoursesSuccess({ courses: response.result })),\n          catchError((error) => of(CoursesActions.requestAllCoursesFail({ error })))\n        )\n      )\n    )\n  );\n\n  filteredCourses$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CoursesActions.requestFilteredCourses),\n      switchMap((action) =>\n        this.coursesService.filterCourses(action.searchValue).pipe(\n          map((response) => {\n            const filteredCourses = response.result;\n            return CoursesActions.requestFilteredCoursesSuccess({ courses: filteredCourses });\n          }),\n          catchError((error) => {\n            console.log(\"Error fetching filtered courses:\", error);\n            return of(CoursesActions.requestFilteredCoursesFail({ error }));\n          })\n        )\n      )\n    )\n  );\n\n  getSpecificCourse$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CoursesActions.requestSingleCourse),\n      mergeMap((action) =>\n        this.coursesService.getCourse(action.id).pipe(\n          map((response) => CoursesActions.requestSingleCourseSuccess({ course: response.result })),\n          catchError((error) => of(CoursesActions.requestSingleCourseFail({ error })))\n        )\n      )\n    )\n  );\n\n  deleteCourse$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CoursesActions.requestDeleteCourse),\n      mergeMap((action) =>\n        this.coursesService.deleteCourse(action.id).pipe(\n          map(() => CoursesActions.requestAllCourses()),\n          catchError((error) => of(CoursesActions.requestDeleteCourseFail({ error })))\n        )\n      )\n    )\n  );\n\n  editCourse$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CoursesActions.requestEditCourse),\n      mergeMap((action) =>\n        this.coursesService.editCourse(action.id, action.course).pipe(\n          map((course) => CoursesActions.requestEditCourseSuccess({ course })),\n          catchError((error) => of(CoursesActions.requestEditCourseFail({ error })))\n        )\n      )\n    )\n  );\n\n  createCourse$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CoursesActions.requestCreateCourse),\n      mergeMap((action) =>\n        this.coursesService.createCourse(action.course).pipe(\n          map((course) => CoursesActions.requestEditCourseSuccess({ course })),\n          catchError((error) => of(CoursesActions.requestEditCourseFail({ error })))\n        )\n      )\n    )\n  );\n\n  redirectToTheCoursePage$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(\n          CoursesActions.requestCreateCourseSuccess,\n          CoursesActions.requestEditCourseSuccess,\n          CoursesActions.requestSingleCourseFail\n        ),\n        map(() => {\n          this.router.navigate([\"/courses\"]);\n        })\n      ),\n    { dispatch: false }\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}