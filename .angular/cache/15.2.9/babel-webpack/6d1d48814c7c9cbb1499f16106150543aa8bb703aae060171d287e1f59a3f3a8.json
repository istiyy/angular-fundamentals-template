{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class CustomDatePipe {\n  transform(value) {\n    if (!value) return '';\n    const date = new Date(value);\n    if (isNaN(date.getTime())) return '';\n    const day = this.pad(date.getDate());\n    const month = this.pad(date.getMonth() + 1);\n    const year = date.getFullYear();\n    return `${day}.${month}.${year}`;\n  }\n  pad(num) {\n    return num < 10 ? '0' + num : num.toString();\n  }\n}\nCustomDatePipe.ɵfac = function CustomDatePipe_Factory(t) {\n  return new (t || CustomDatePipe)();\n};\nCustomDatePipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"customDate\",\n  type: CustomDatePipe,\n  pure: true\n});","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,cAAc;EAEvBC,SAAS,CAACC,KAAoB;IAC1B,IAAG,CAACA,KAAK,EAAE,OAAO,EAAE;IAEpB,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,KAAK,CAAC;IAC5B,IAAGG,KAAK,CAACF,IAAI,CAACG,OAAO,EAAE,CAAC,EAAE,OAAO,EAAE;IAEnC,MAAMC,GAAG,GAAG,IAAI,CAACC,GAAG,CAACL,IAAI,CAACM,OAAO,EAAE,CAAC;IACpC,MAAMC,KAAK,GAAG,IAAI,CAACF,GAAG,CAACL,IAAI,CAACQ,QAAQ,EAAE,GAAG,CAAC,CAAC;IAC3C,MAAMC,IAAI,GAAGT,IAAI,CAACU,WAAW,EAAE;IAE/B,OAAO,GAAGN,GAAG,IAAIG,KAAK,IAAIE,IAAI,EAAE;EACpC;EAEQJ,GAAG,CAACM,GAAW;IACnB,OAAOA,GAAG,GAAG,EAAE,GAAG,GAAG,GAAGA,GAAG,GAAGA,GAAG,CAACC,QAAQ,EAAE;EAChD;;AAjBSf,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;;QAAdA,cAAc;EAAAgB;AAAA","names":["CustomDatePipe","transform","value","date","Date","isNaN","getTime","day","pad","getDate","month","getMonth","year","getFullYear","num","toString","pure"],"sourceRoot":"","sources":["C:\\Users\\Isti\\Desktop\\epam-tasks\\angular-fundamentals-template\\src\\app\\shared\\pipes\\custom-date.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'customDate'\n})\nexport class CustomDatePipe implements PipeTransform {\n\n    transform(value: Date | string): string {\n        if(!value) return '';\n\n        const date = new Date(value);\n        if(isNaN(date.getTime())) return '';\n\n        const day = this.pad(date.getDate());\n        const month = this.pad(date.getMonth() + 1);\n        const year = date.getFullYear();\n    \n        return `${day}.${month}.${year}`;\n    }\n\n    private pad(num: number): string {\n        return num < 10 ? '0' + num : num.toString();\n    }\n    // Add your code here\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}