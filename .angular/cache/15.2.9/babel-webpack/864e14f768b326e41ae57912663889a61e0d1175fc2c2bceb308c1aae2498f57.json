{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./user.service\";\nexport class UserStoreService {\n  constructor(userService) {\n    this.userService = userService;\n    this.name$$ = new BehaviorSubject('');\n    this.isAdmin$$ = new BehaviorSubject(false);\n    this.name$ = this.name$$.asObservable();\n    this.isAdmin$ = this.isAdmin$$.asObservable();\n  }\n  getUser() {\n    this.userService.getUser().pipe(tap(user => {\n      this.name$$.next(user.result.name);\n      this.isAdmin$$.next(user.result.role === 'admin');\n    })).subscribe();\n    // Add your code here\n  }\n\n  get isAdmin() {\n    // Add your code here. Get isAdmin$$ value\n    return this.isAdmin$$.value;\n  }\n  set isAdmin(value) {\n    this.isAdmin$$.next(value);\n    // Add your code here. Change isAdmin$$ value\n  }\n}\n\nUserStoreService.ɵfac = function UserStoreService_Factory(t) {\n  return new (t || UserStoreService)(i0.ɵɵinject(i1.UserService));\n};\nUserStoreService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserStoreService,\n  factory: UserStoreService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,gBAAgB;EAQzBC,YAAqBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IANxB,WAAM,GAAG,IAAIJ,eAAe,CAAS,EAAE,CAAC;IACxC,cAAS,GAAG,IAAIA,eAAe,CAAU,KAAK,CAAC;IAEhD,UAAK,GAAuB,IAAI,CAACK,MAAM,CAACC,YAAY,EAAE;IACtD,aAAQ,GAAwB,IAAI,CAACC,SAAS,CAACD,YAAY,EAAE;EAEpB;EAEhDE,OAAO;IACH,IAAI,CAACJ,WAAW,CAACI,OAAO,EAAE,CAACC,IAAI,CAC3BR,GAAG,CAACS,IAAI,IAAG;MACP,IAAI,CAACL,MAAM,CAACM,IAAI,CAACD,IAAI,CAACE,MAAM,CAACC,IAAI,CAAC;MAClC,IAAI,CAACN,SAAS,CAACI,IAAI,CAACD,IAAI,CAACE,MAAM,CAACE,IAAI,KAAK,OAAO,CAAC;IACrD,CAAC,CAAC,CACL,CAACC,SAAS,EAAE;IACb;EACJ;;EAEA,IAAIC,OAAO;IACP;IACA,OAAO,IAAI,CAACT,SAAS,CAACU,KAAK;EAC/B;EAEA,IAAID,OAAO,CAACC,KAAc;IACtB,IAAI,CAACV,SAAS,CAACI,IAAI,CAACM,KAAK,CAAC;IAC1B;EACJ;;;AA5BSf,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAgB,SAAhBhB,gBAAgB;EAAAiB,YAFb;AAAM","names":["BehaviorSubject","tap","UserStoreService","constructor","userService","name$$","asObservable","isAdmin$$","getUser","pipe","user","next","result","name","role","subscribe","isAdmin","value","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Isti\\Desktop\\epam-tasks\\angular-fundamentals-template\\src\\app\\user\\services\\user-store.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { UserService } from './user.service';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class UserStoreService {\n\n    private name$$ = new BehaviorSubject<string>('');\n    private isAdmin$$ = new BehaviorSubject<boolean>(false);\n\n    public name$: Observable<string> = this.name$$.asObservable();\n    public isAdmin$: Observable<boolean> = this.isAdmin$$.asObservable();\n\n    constructor( private userService: UserService) {}\n\n    getUser(): void {\n        this.userService.getUser().pipe(\n            tap(user => {\n                this.name$$.next(user.result.name)\n                this.isAdmin$$.next(user.result.role === 'admin')\n            })\n        ).subscribe();\n        // Add your code here\n    }\n\n    get isAdmin(): boolean {\n        // Add your code here. Get isAdmin$$ value\n        return this.isAdmin$$.value\n    }\n\n    set isAdmin(value: boolean) {\n        this.isAdmin$$.next(value)\n        // Add your code here. Change isAdmin$$ value\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}