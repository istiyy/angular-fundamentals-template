{"ast":null,"code":"import { select } from '@ngrx/store';\nimport * as CoursesActions from './courses.actions';\nimport * as fromCoursesSelectors from './courses.selectors';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport class CoursesStateFacade {\n  constructor(store) {\n    this.store = store;\n    // Add your code here\n    this.isAllCoursesLoading$ = this.store.pipe(select(fromCoursesSelectors.isAllCoursesLoadingSelector));\n    this.isSingleCourseLoading$ = this.store.pipe(select(fromCoursesSelectors.isSingleCourseLoadingSelector));\n    this.isSearchingState$ = this.store.pipe(select(fromCoursesSelectors.isSearchingStateSelector));\n    this.courses$ = this.store.pipe(select(fromCoursesSelectors.getCourses));\n    this.allCourses$ = this.store.pipe(select(fromCoursesSelectors.getAllCourses));\n    this.course$ = this.store.pipe(select(fromCoursesSelectors.getCourse));\n    this.errorMessage$ = this.store.pipe(select(fromCoursesSelectors.getErrorMessage));\n  }\n  getAllCourses() {\n    this.store.dispatch(CoursesActions.requestAllCourses());\n  }\n  getSingleCourse(id) {\n    this.store.dispatch(CoursesActions.requestSingleCourse({\n      id\n    }));\n  }\n  getFilteredCourses(searchValue) {\n    this.store.dispatch(CoursesActions.requestFilteredCourses({\n      searchValue\n    }));\n  }\n  editCourse(id, course) {\n    this.store.dispatch(CoursesActions.requestEditCourse({\n      id,\n      course\n    }));\n  }\n  createCourse(course) {\n    this.store.dispatch(CoursesActions.requestCreateCourse({\n      course\n    }));\n  }\n  deleteCourse(id) {\n    this.store.dispatch(CoursesActions.requestDeleteCourse({\n      id\n    }));\n  }\n}\nCoursesStateFacade.ɵfac = function CoursesStateFacade_Factory(t) {\n  return new (t || CoursesStateFacade)(i0.ɵɵinject(i1.Store));\n};\nCoursesStateFacade.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CoursesStateFacade,\n  factory: CoursesStateFacade.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAgBA,MAAM,QAAQ,aAAa;AAE3C,OAAO,KAAKC,cAAc,MAAM,mBAAmB;AACnD,OAAO,KAAKC,oBAAoB,MAAM,qBAAqB;;;AAU3D,OAAM,MAAOC,kBAAkB;EA+B3BC,YAAoBC,KAA0B;IAA1B,UAAK,GAALA,KAAK;IA9BzB;IAEA,yBAAoB,GAAwB,IAAI,CAACA,KAAK,CAACC,IAAI,CACvDN,MAAM,CAACE,oBAAoB,CAACK,2BAA2B,CAAC,CAC3D;IAED,2BAAsB,GAAwB,IAAI,CAACF,KAAK,CAACC,IAAI,CACzDN,MAAM,CAACE,oBAAoB,CAACM,6BAA6B,CAAC,CAC7D;IAED,sBAAiB,GAAwB,IAAI,CAACH,KAAK,CAACC,IAAI,CACpDN,MAAM,CAACE,oBAAoB,CAACO,wBAAwB,CAAC,CACxD;IAED,aAAQ,GAA0B,IAAI,CAACJ,KAAK,CAACC,IAAI,CAC7CN,MAAM,CAACE,oBAAoB,CAACQ,UAAU,CAAC,CAC1C;IAED,gBAAW,GAA0B,IAAI,CAACL,KAAK,CAACC,IAAI,CAChDN,MAAM,CAACE,oBAAoB,CAACS,aAAa,CAAC,CAC7C;IAED,YAAO,GAA8B,IAAI,CAACN,KAAK,CAACC,IAAI,CAChDN,MAAM,CAACE,oBAAoB,CAACU,SAAS,CAAC,CACzC;IAED,kBAAa,GAA6B,IAAI,CAACP,KAAK,CAACC,IAAI,CACrDN,MAAM,CAACE,oBAAoB,CAACW,eAAe,CAAC,CAC/C;EAEgD;EAEjDF,aAAa;IACT,IAAI,CAACN,KAAK,CAACS,QAAQ,CAACb,cAAc,CAACc,iBAAiB,EAAE,CAAC;EAC3D;EAEAC,eAAe,CAACC,EAAU;IACtB,IAAI,CAACZ,KAAK,CAACS,QAAQ,CAACb,cAAc,CAACiB,mBAAmB,CAAC;MAAED;IAAE,CAAE,CAAC,CAAC;EACnE;EAEAE,kBAAkB,CAACC,WAAmB;IAClC,IAAI,CAACf,KAAK,CAACS,QAAQ,CAACb,cAAc,CAACoB,sBAAsB,CAAC;MAAED;IAAW,CAAE,CAAC,CAAC;EAC/E;EAEAE,UAAU,CAACL,EAAU,EAAEM,MAAc;IACjC,IAAI,CAAClB,KAAK,CAACS,QAAQ,CAACb,cAAc,CAACuB,iBAAiB,CAAC;MAAEP,EAAE;MAAEM;IAAM,CAAE,CAAC,CAAC;EACzE;EAEAE,YAAY,CAACF,MAAc;IACvB,IAAI,CAAClB,KAAK,CAACS,QAAQ,CAACb,cAAc,CAACyB,mBAAmB,CAAC;MAAEH;IAAM,CAAE,CAAC,CAAC;EACvE;EAEAI,YAAY,CAACV,EAAU;IACnB,IAAI,CAACZ,KAAK,CAACS,QAAQ,CAACb,cAAc,CAAC2B,mBAAmB,CAAC;MAAEX;IAAE,CAAE,CAAC,CAAC;EACnE;;AAvDSd,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAA0B,SAAlB1B,kBAAkB;EAAA2B,YAFf;AAAM","names":["select","CoursesActions","fromCoursesSelectors","CoursesStateFacade","constructor","store","pipe","isAllCoursesLoadingSelector","isSingleCourseLoadingSelector","isSearchingStateSelector","getCourses","getAllCourses","getCourse","getErrorMessage","dispatch","requestAllCourses","getSingleCourse","id","requestSingleCourse","getFilteredCourses","searchValue","requestFilteredCourses","editCourse","course","requestEditCourse","createCourse","requestCreateCourse","deleteCourse","requestDeleteCourse","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Isti\\Desktop\\epam-tasks\\angular-fundamentals-template\\src\\app\\store\\courses\\courses.facade.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport * as CoursesActions from './courses.actions';\nimport * as fromCoursesSelectors from './courses.selectors'\nimport { CoursesState } from './courses.reducer';\nimport { Course } from '@app/models/course.model';\n\n\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CoursesStateFacade {\n    // Add your code here\n\n    isAllCoursesLoading$: Observable<boolean> = this.store.pipe(\n        select(fromCoursesSelectors.isAllCoursesLoadingSelector)\n    );\n\n    isSingleCourseLoading$: Observable<boolean> = this.store.pipe(\n        select(fromCoursesSelectors.isSingleCourseLoadingSelector)\n    );\n\n    isSearchingState$: Observable<boolean> = this.store.pipe(\n        select(fromCoursesSelectors.isSearchingStateSelector)\n    );\n\n    courses$: Observable<Course []> = this.store.pipe(\n        select(fromCoursesSelectors.getCourses)\n    );\n\n    allCourses$: Observable<Course []> = this.store.pipe(\n        select(fromCoursesSelectors.getAllCourses)\n    );\n\n    course$: Observable<Course | null> = this.store.pipe(\n        select(fromCoursesSelectors.getCourse)\n    );\n\n    errorMessage$: Observable<Error | null> = this.store.pipe(\n        select(fromCoursesSelectors.getErrorMessage)\n    )\n\n    constructor(private store: Store<CoursesState>) {}\n\n    getAllCourses(): void{\n        this.store.dispatch(CoursesActions.requestAllCourses());\n    }\n\n    getSingleCourse(id: string): void {\n        this.store.dispatch(CoursesActions.requestSingleCourse({ id }));\n    }\n\n    getFilteredCourses(searchValue: string): void {\n        this.store.dispatch(CoursesActions.requestFilteredCourses({ searchValue }));\n    }\n\n    editCourse(id: string, course: Course): void {\n        this.store.dispatch(CoursesActions.requestEditCourse({ id, course }));\n    }\n\n    createCourse(course: Course): void {\n        this.store.dispatch(CoursesActions.requestCreateCourse({ course }));\n    }\n\n    deleteCourse(id: string): void {\n        this.store.dispatch(CoursesActions.requestDeleteCourse({ id }));\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}