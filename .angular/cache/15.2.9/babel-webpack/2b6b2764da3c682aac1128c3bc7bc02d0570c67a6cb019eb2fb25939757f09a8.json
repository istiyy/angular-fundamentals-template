{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./session-storage.service\";\nexport class AuthService {\n  constructor(http, sessionStorageService) {\n    this.http = http;\n    this.sessionStorageService = sessionStorageService;\n    this.apiUrl = 'http://localhost:4000';\n    this.isAuthorized$$ = new BehaviorSubject(this.sessionStorageService.getToken() !== null);\n    this.isAuthorized$ = this.isAuthorized$$.asObservable();\n  }\n  login(user) {\n    return this.http.post(`${this.apiUrl}/login`, user).pipe(tap(response => {\n      if (response.result) {\n        this.sessionStorageService.setToken(response.result);\n        this.isAuthorised = true;\n      }\n    }));\n    // Add your code here\n  }\n\n  logout() {\n    this.sessionStorageService.deleteToken();\n    this.isAuthorised = false;\n    // Add your code here\n  }\n\n  register(user) {\n    return this.http.post(`${this.apiUrl}/register`, user).pipe(tap(response => {\n      if (response.result) {\n        this.sessionStorageService.setToken(response.result);\n        this.isAuthorised = true;\n      }\n    }));\n  }\n  get isAuthorised() {\n    return this.isAuthorized$$.value;\n    // Add your code here. Get isAuthorized$$ value\n  }\n\n  set isAuthorised(value) {\n    this.isAuthorized$$.next(value);\n    // Add your code here. Change isAuthorized$$ value\n  }\n\n  getLoginUrl() {\n    return `${this.apiUrl}/login`;\n    // Add your code here\n  }\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SessionStorageService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;;;;AAOpC,OAAM,MAAOC,WAAW;EAKpBC,YACYC,IAAgB,EAChBC,qBAA4C;IAD5C,SAAI,GAAJD,IAAI;IACJ,0BAAqB,GAArBC,qBAAqB;IANhB,WAAM,GAAG,uBAAuB;IACzC,mBAAc,GAAG,IAAIL,eAAe,CAAU,IAAI,CAACK,qBAAqB,CAACC,QAAQ,EAAE,KAAK,IAAI,CAAC;IAC9F,kBAAa,GAAG,IAAI,CAACC,cAAc,CAACC,YAAY,EAAE;EAKtD;EAEHC,KAAK,CAACC,IAAuC;IACzC,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAM,GAAG,IAAI,CAACC,MAAM,QAAQ,EAAEF,IAAI,CAAC,CACnDG,IAAI,CAACZ,GAAG,CAACa,QAAQ,IAAG;MACjB,IAAIA,QAAQ,CAACC,MAAM,EAAE;QACjB,IAAI,CAACV,qBAAqB,CAACW,QAAQ,CAACF,QAAQ,CAACC,MAAM,CAAC;QACpD,IAAI,CAACE,YAAY,GAAG,IAAI;;IAEhC,CAAC,CAAC,CAAC;IACP;EACJ;;EAEAC,MAAM;IACF,IAAI,CAACb,qBAAqB,CAACc,WAAW,EAAE;IACxC,IAAI,CAACF,YAAY,GAAG,KAAK;IACzB;EACJ;;EAEAG,QAAQ,CAACV,IAAuD;IAC5D,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAM,GAAG,IAAI,CAACC,MAAM,WAAW,EAAEF,IAAI,CAAC,CAACG,IAAI,CAC5DZ,GAAG,CAAEa,QAAQ,IAAI;MACb,IAAIA,QAAQ,CAACC,MAAM,EAAE;QACjB,IAAI,CAACV,qBAAqB,CAACW,QAAQ,CAACF,QAAQ,CAACC,MAAM,CAAC;QACpD,IAAI,CAACE,YAAY,GAAG,IAAI;;IAEhC,CAAC,CAAC,CACL;EACL;EAEA,IAAIA,YAAY;IACZ,OAAO,IAAI,CAACV,cAAc,CAACc,KAAK;IAChC;EACJ;;EAEA,IAAIJ,YAAY,CAACI,KAAc;IAC3B,IAAI,CAACd,cAAc,CAACe,IAAI,CAACD,KAAK,CAAC;IAC/B;EACJ;;EAEAE,WAAW;IACP,OAAO,GAAG,IAAI,CAACX,MAAM,QAAQ;IAC7B;EACJ;;;AAnDSV,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAsB,SAAXtB,WAAW;EAAAuB,YAFR;AAAM","names":["BehaviorSubject","tap","AuthService","constructor","http","sessionStorageService","getToken","isAuthorized$$","asObservable","login","user","post","apiUrl","pipe","response","result","setToken","isAuthorised","logout","deleteToken","register","value","next","getLoginUrl","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Isti\\Desktop\\epam-tasks\\angular-fundamentals-template\\src\\app\\auth\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { SessionStorageService } from './session-storage.service';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthService {\n    private readonly apiUrl = 'http://localhost:4000';\n    private isAuthorized$$ = new BehaviorSubject<boolean>(this.sessionStorageService.getToken() !== null);\n    public isAuthorized$ = this.isAuthorized$$.asObservable();\n\n    constructor(\n        private http: HttpClient,\n        private sessionStorageService: SessionStorageService,\n    ) {}\n\n    login(user: {email: string, password: string}): Observable<any> { // replace 'any' with the required interface\n        return this.http.post<any>(`${this.apiUrl}/login`, user)\n            .pipe(tap(response => {\n                if (response.result) {\n                    this.sessionStorageService.setToken(response.result);\n                    this.isAuthorised = true\n                }\n            }))\n        // Add your code here\n    }\n\n    logout(): void {\n        this.sessionStorageService.deleteToken();\n        this.isAuthorised = false;\n        // Add your code here\n    }\n\n    register(user: { name: string; email: string; password: string }): Observable<any> {\n        return this.http.post<any>(`${this.apiUrl}/register`, user).pipe(\n            tap((response) => {\n                if (response.result) {\n                    this.sessionStorageService.setToken(response.result);\n                    this.isAuthorised = true;\n                }\n            })\n        );\n    }\n\n    get isAuthorised(): boolean {\n        return this.isAuthorized$$.value\n        // Add your code here. Get isAuthorized$$ value\n    }\n\n    set isAuthorised(value: boolean) {\n        this.isAuthorized$$.next(value)\n        // Add your code here. Change isAuthorized$$ value\n    }\n\n    getLoginUrl(): string {\n        return `${this.apiUrl}/login`;\n        // Add your code here\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}