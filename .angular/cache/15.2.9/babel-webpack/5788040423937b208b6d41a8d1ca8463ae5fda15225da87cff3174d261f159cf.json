{"ast":null,"code":"import { HttpParams } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CoursesService {\n  editAuthor(id, name) {\n    throw new Error(\"Method not implemented.\");\n  }\n  deleteAuthor(id) {\n    throw new Error(\"Method not implemented.\");\n  }\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = \"http://localhost:4000/api/courses\";\n  }\n  getAll() {\n    return this.http.get(`${this.baseUrl}/all`);\n  }\n  createCourse(course) {\n    return this.http.post(`${this.baseUrl}/add`, course);\n  }\n  editCourse(id, course) {\n    return this.http.put(`${this.baseUrl}/${id}`, course);\n  }\n  getCourse(id) {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n  deleteCourse(id) {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n  filterCourses(filters) {\n    let params = new HttpParams();\n    for (const key in filters) {\n      if (filters.hasOwnProperty(key)) {\n        filters[key].forEach(value => {\n          params = params.append(key, value);\n        });\n      }\n    }\n    return this.http.get(`${this.baseUrl}/filter`, {\n      params\n    });\n  }\n  getAllAuthors() {\n    return this.http.get(`${this.baseUrl}/authors`);\n  }\n  createAuthor(name) {\n    return this.http.post(`${this.baseUrl}/authors`, {\n      name\n    });\n  }\n  getAuthorById(id) {\n    return this.http.get(`${this.baseUrl}/authors/${id}`);\n  }\n}\nCoursesService.ɵfac = function CoursesService_Factory(t) {\n  return new (t || CoursesService)(i0.ɵɵinject(i1.HttpClient));\n};\nCoursesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CoursesService,\n  factory: CoursesService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;;;AAM7D,OAAM,MAAOC,cAAc;EACzBC,UAAU,CAACC,EAAU,EAAEC,IAAY;IACjC,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EACAC,YAAY,CAACH,EAAU;IACrB,MAAM,IAAIE,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAGAE,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,YAAO,GAAG,mCAAmC;EAEd;EAEvCC,MAAM;IACJ,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAC,GAAG,IAAI,CAACC,OAAO,MAAM,CAAC;EAC7C;EAEAC,YAAY,CAACC,MAAW;IACtB,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAC,GAAG,IAAI,CAACH,OAAO,MAAM,EAAEE,MAAM,CAAC;EACtD;EAEAE,UAAU,CAACZ,EAAU,EAAEU,MAAW;IAChC,OAAO,IAAI,CAACL,IAAI,CAACQ,GAAG,CAAC,GAAG,IAAI,CAACL,OAAO,IAAIR,EAAE,EAAE,EAAEU,MAAM,CAAC;EACvD;EAEAI,SAAS,CAACd,EAAU;IAClB,OAAO,IAAI,CAACK,IAAI,CAACE,GAAG,CAAC,GAAG,IAAI,CAACC,OAAO,IAAIR,EAAE,EAAE,CAAC;EAC/C;EAEAe,YAAY,CAACf,EAAU;IACrB,OAAO,IAAI,CAACK,IAAI,CAACW,MAAM,CAAC,GAAG,IAAI,CAACR,OAAO,IAAIR,EAAE,EAAE,CAAC;EAClD;EAEAiB,aAAa,CAACC,OAAoC;IAChD,IAAIC,MAAM,GAAG,IAAItB,UAAU,EAAE;IAC7B,KAAK,MAAMuB,GAAG,IAAIF,OAAO,EAAE;MACzB,IAAIA,OAAO,CAACG,cAAc,CAACD,GAAG,CAAC,EAAE;QAC/BF,OAAO,CAACE,GAAG,CAAC,CAACE,OAAO,CAAEC,KAAK,IAAI;UAC7BJ,MAAM,GAAGA,MAAM,CAACK,MAAM,CAACJ,GAAG,EAAEG,KAAK,CAAC;QACpC,CAAC,CAAC;;;IAGN,OAAO,IAAI,CAAClB,IAAI,CAACE,GAAG,CAAC,GAAG,IAAI,CAACC,OAAO,SAAS,EAAE;MAAEW;IAAM,CAAE,CAAC;EAC5D;EAEAM,aAAa;IACX,OAAO,IAAI,CAACpB,IAAI,CAACE,GAAG,CAAC,GAAG,IAAI,CAACC,OAAO,UAAU,CAAC;EACjD;EAEAkB,YAAY,CAACzB,IAAY;IACvB,OAAO,IAAI,CAACI,IAAI,CAACM,IAAI,CAAC,GAAG,IAAI,CAACH,OAAO,UAAU,EAAE;MAAEP;IAAI,CAAE,CAAC;EAC5D;EAEA0B,aAAa,CAAC3B,EAAU;IACtB,OAAO,IAAI,CAACK,IAAI,CAACE,GAAG,CAAC,GAAG,IAAI,CAACC,OAAO,YAAYR,EAAE,EAAE,CAAC;EACvD;;AArDWF,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAA8B,SAAd9B,cAAc;EAAA+B,YAFb;AAAM","names":["HttpParams","CoursesService","editAuthor","id","name","Error","deleteAuthor","constructor","http","getAll","get","baseUrl","createCourse","course","post","editCourse","put","getCourse","deleteCourse","delete","filterCourses","filters","params","key","hasOwnProperty","forEach","value","append","getAllAuthors","createAuthor","getAuthorById","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Isti\\Desktop\\epam-tasks\\angular-fundamentals-template\\src\\app\\services\\courses.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class CoursesService {\r\n  editAuthor(id: string, name: string) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n  deleteAuthor(id: string) {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n  private baseUrl = \"http://localhost:4000/api/courses\";\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAll(): Observable<any> {\r\n    return this.http.get(`${this.baseUrl}/all`);\r\n  }\r\n\r\n  createCourse(course: any): Observable<any> {\r\n    return this.http.post(`${this.baseUrl}/add`, course);\r\n  }\r\n\r\n  editCourse(id: string, course: any): Observable<any> {\r\n    return this.http.put(`${this.baseUrl}/${id}`, course);\r\n  }\r\n\r\n  getCourse(id: string): Observable<any> {\r\n    return this.http.get(`${this.baseUrl}/${id}`);\r\n  }\r\n\r\n  deleteCourse(id: string): Observable<any> {\r\n    return this.http.delete(`${this.baseUrl}/${id}`);\r\n  }\r\n\r\n  filterCourses(filters: { [key: string]: string[] }): Observable<any> {\r\n    let params = new HttpParams();\r\n    for (const key in filters) {\r\n      if (filters.hasOwnProperty(key)) {\r\n        filters[key].forEach((value) => {\r\n          params = params.append(key, value);\r\n        });\r\n      }\r\n    }\r\n    return this.http.get(`${this.baseUrl}/filter`, { params });\r\n  }\r\n\r\n  getAllAuthors(): Observable<any> {\r\n    return this.http.get(`${this.baseUrl}/authors`);\r\n  }\r\n\r\n  createAuthor(name: string): Observable<any> {\r\n    return this.http.post(`${this.baseUrl}/authors`, { name });\r\n  }\r\n\r\n  getAuthorById(id: string): Observable<any> {\r\n    return this.http.get(`${this.baseUrl}/authors/${id}`);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}