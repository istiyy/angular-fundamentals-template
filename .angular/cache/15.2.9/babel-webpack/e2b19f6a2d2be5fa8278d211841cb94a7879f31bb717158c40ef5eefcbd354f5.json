{"ast":null,"code":"import { of, switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CoursesService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `http://localhost:4000`;\n  }\n  getAll() {\n    return this.http.get(`${this.apiUrl}/courses/all`);\n    // Add your code here\n  }\n\n  createCourse(course) {\n    return this.http.post(`${this.apiUrl}/courses/add`, course);\n    // Add your code here\n  }\n\n  editCourse(id, course) {\n    return this.http.put(`${this.apiUrl}/courses/${id}`, course);\n    // Add your code here\n  }\n\n  getCourse(id) {\n    return this.http.get(`${this.apiUrl}/courses/${id}`);\n    // Add your code here\n  }\n\n  deleteCourse(id) {\n    return this.http.delete(`${this.apiUrl}/courses/${id}`);\n    // Add your code here\n  }\n\n  filterCourses(value) {\n    const makeRequest = paramName => {\n      const params = {};\n      params[paramName] = value;\n      return this.http.get(`${this.apiUrl}/courses/filter`, {\n        params\n      });\n    };\n    return makeRequest('title').pipe(switchMap(response => response.result.length ? of(response) : makeRequest('description')), switchMap(response => response.result.length ? of(response) : makeRequest('duration')), switchMap(response => response.result.length ? of(response) : makeRequest('creationDate')));\n    // Add your code here */\n  }\n\n  getAllAuthors() {\n    return this.http.get(`${this.apiUrl}/authors/all`);\n    // Add your code here\n  }\n\n  createAuthor(name) {\n    return this.http.post(`${this.apiUrl}/authors/add`, {\n      name\n    });\n    // Add your code here\n  }\n\n  getAuthorById(id) {\n    return this.http.get(`${this.apiUrl}/authors/${id}`);\n    // Add your code here\n  }\n}\n\nCoursesService.ɵfac = function CoursesService_Factory(t) {\n  return new (t || CoursesService)(i0.ɵɵinject(i1.HttpClient));\n};\nCoursesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CoursesService,\n  factory: CoursesService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,EAAE,EAAEC,SAAS,QAAQ,MAAM;;;AAMhD,OAAM,MAAOC,cAAc;EAGvBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAC,uBAAuB;EAEA;EAEtCC,MAAM;IACF,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAC,GAAG,IAAI,CAACC,MAAM,cAAc,CAAC;IAClD;EACJ;;EAEAC,YAAY,CAACC,MAAc;IACvB,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAS,GAAG,IAAI,CAACH,MAAM,cAAc,EAAEE,MAAM,CAAC;IACnE;EACJ;;EAEAE,UAAU,CAACC,EAAU,EAAEH,MAAc;IACjC,OAAO,IAAI,CAACL,IAAI,CAACS,GAAG,CAAS,GAAG,IAAI,CAACN,MAAM,YAAYK,EAAE,EAAE,EAAEH,MAAM,CAAC;IACpE;EACJ;;EAEAK,SAAS,CAACF,EAAU;IAChB,OAAO,IAAI,CAACR,IAAI,CAACE,GAAG,CAAC,GAAG,IAAI,CAACC,MAAM,YAAYK,EAAE,EAAE,CAAC;IACpD;EACJ;;EAEAG,YAAY,CAACH,EAAU;IACnB,OAAO,IAAI,CAACR,IAAI,CAACY,MAAM,CAAC,GAAG,IAAI,CAACT,MAAM,YAAYK,EAAE,EAAE,CAAC;IACvD;EACJ;;EAGAK,aAAa,CAACC,KAAa;IACvB,MAAMC,WAAW,GAAIC,SAAiB,IAAqB;MACvD,MAAMC,MAAM,GAAQ,EAAE;MACtBA,MAAM,CAACD,SAAS,CAAC,GAAGF,KAAK;MACzB,OAAO,IAAI,CAACd,IAAI,CAACE,GAAG,CAAC,GAAG,IAAI,CAACC,MAAM,iBAAiB,EAAE;QAAEc;MAAM,CAAE,CAAC;IACrE,CAAC;IAED,OAAOF,WAAW,CAAC,OAAO,CAAC,CAACG,IAAI,CAC5BrB,SAAS,CAACsB,QAAQ,IAAIA,QAAQ,CAACC,MAAM,CAACC,MAAM,GAAGzB,EAAE,CAACuB,QAAQ,CAAC,GAAGJ,WAAW,CAAC,aAAa,CAAC,CAAC,EACzFlB,SAAS,CAACsB,QAAQ,IAAIA,QAAQ,CAACC,MAAM,CAACC,MAAM,GAAGzB,EAAE,CAACuB,QAAQ,CAAC,GAAGJ,WAAW,CAAC,UAAU,CAAC,CAAC,EACtFlB,SAAS,CAACsB,QAAQ,IAAIA,QAAQ,CAACC,MAAM,CAACC,MAAM,GAAGzB,EAAE,CAACuB,QAAQ,CAAC,GAAGJ,WAAW,CAAC,cAAc,CAAC,CAAC,CAC7F;IACD;EACJ;;EAGAO,aAAa;IACT,OAAO,IAAI,CAACtB,IAAI,CAACE,GAAG,CAAC,GAAG,IAAI,CAACC,MAAM,cAAc,CAAC;IAClD;EACJ;;EAEAoB,YAAY,CAACC,IAAY;IACrB,OAAO,IAAI,CAACxB,IAAI,CAACM,IAAI,CAAC,GAAG,IAAI,CAACH,MAAM,cAAc,EAAE;MAAEqB;IAAI,CAAE,CAAC;IAC7D;EACJ;;EAEAC,aAAa,CAACjB,EAAU;IACpB,OAAO,IAAI,CAACR,IAAI,CAACE,GAAG,CAAC,GAAG,IAAI,CAACC,MAAM,YAAYK,EAAE,EAAE,CAAC;IACpD;EACJ;;;AA5DSV,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAA4B,SAAd5B,cAAc;EAAA6B,YAFX;AAAM","names":["of","switchMap","CoursesService","constructor","http","getAll","get","apiUrl","createCourse","course","post","editCourse","id","put","getCourse","deleteCourse","delete","filterCourses","value","makeRequest","paramName","params","pipe","response","result","length","getAllAuthors","createAuthor","name","getAuthorById","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Isti\\Desktop\\epam-tasks\\angular-fundamentals-template\\src\\app\\services\\courses.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of, switchMap } from 'rxjs';\nimport { Course } from '@app/models/course.model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CoursesService {\n    private apiUrl=`http://localhost:4000`\n    \n    constructor(private http: HttpClient){}\n\n    getAll(): Observable<any> {\n        return this.http.get(`${this.apiUrl}/courses/all`);\n        // Add your code here\n    }\n\n    createCourse(course: Course): Observable<Course> { // replace 'any' with the required interface\n        return this.http.post<Course>(`${this.apiUrl}/courses/add`, course)\n        // Add your code here\n    }\n\n    editCourse(id: string, course: Course): Observable<Course> { // replace 'any' with the required interface\n        return this.http.put<Course>(`${this.apiUrl}/courses/${id}`, course)\n        // Add your code here\n    }\n\n    getCourse(id: string): Observable<any> {\n        return this.http.get(`${this.apiUrl}/courses/${id}`)\n        // Add your code here\n    }\n\n    deleteCourse(id: string): Observable<any> {\n        return this.http.delete(`${this.apiUrl}/courses/${id}`)\n        // Add your code here\n    }\n\n    \n    filterCourses(value: string): Observable<any> {\n        const makeRequest = (paramName: string): Observable<any> => {\n            const params: any = {};\n            params[paramName] = value;\n            return this.http.get(`${this.apiUrl}/courses/filter`, { params });\n        };\n    \n        return makeRequest('title').pipe(\n            switchMap(response => response.result.length ? of(response) : makeRequest('description')),\n            switchMap(response => response.result.length ? of(response) : makeRequest('duration')),\n            switchMap(response => response.result.length ? of(response) : makeRequest('creationDate')),\n        );\n        // Add your code here */\n    }\n        \n   \n    getAllAuthors(): Observable<any> {\n        return this.http.get(`${this.apiUrl}/authors/all`);\n        // Add your code here\n    }\n\n    createAuthor(name: string): Observable<any> {\n        return this.http.post(`${this.apiUrl}/authors/add`, { name });\n        // Add your code here\n    }\n\n    getAuthorById(id: string): Observable<any> {\n        return this.http.get(`${this.apiUrl}/authors/${id}`)\n        // Add your code here\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}